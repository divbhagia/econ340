{
  "hash": "8d31680122dbb46d51080aa9c672423f",
  "result": {
    "markdown": "---\ntitle: |\n  | ECON 340  \n  | Economics Research Methods\nauthor: \"Div Bhagia\"\ndate: |\n  | Lecture 7: Data Analysis in R\ndocumentclass: slidesLight\noutput:\n  beamer_presentation\nheader-includes:\n  - \\renewcommand{\\tightlist}{\\setlength{\\itemsep}{10pt}\\setlength{\\parskip}{0pt}}\nurlcolor: blue\n---\n\n\n\n\n### So far\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load Packages\nlibrary(tidyverse)\n\n# Set directory (optional)\n#setwd(\"~/Dropbox (CSU Fullerton)/Econ340_R\")\n\n# Import data\ndata <- read.csv(\"caschool.csv\")\n```\n:::\n\nYou can clear your environment before starting by using the broom on the top-right. Or add `rm(list=ls())` command on top of your R-script.\n\n### Tabulating Variables\n\n-   Variable `gr_span` reports the grade span of a school district (K-6 or K-8)\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    table(data$gr_span)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    \n    KK-06 KK-08 \n       61   359 \n    ```\n    :::\n    :::\n\n\n-   So 61 school districts go up to grade 6 while 359 go up to grade 8\n\n### Dplyr Syntax\n\n-   `dplyr` is a `TidyVerse` package that provides several useful functions for data manipulation\n-   However, `dplyr` uses slightly different syntax from base R.\n-   One key operator utilized by this package is the pipe operator `%>%`\n-   You can use shortcut Cmd + Shift + M (Mac) and Ctrl + Shift + M (Windows) for `%>%`\n-   You can think of this operator as standing for \"then\" in the code\n\n### Dplyr Syntax\n\nFor example, to tabulate data:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata %>% count(gr_span)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gr_span   n\n1   KK-06  61\n2   KK-08 359\n```\n:::\n:::\n\n\n### Some Useful `dplyr` Functions\n\n-   `mutate()` adds new variables that are functions of existing variables\n-   `select()` picks variables based on their names\n-   `filter()` picks cases based on their values\n-   `summarise()` reduces multiple values down to a single summary\n-   `arrange()` changes the ordering of rows\n-   `group_by()` performs subsequent calculations within-group (and ungroup() when done)\n\n### Select Variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata %>% select(computer, enrl_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    computer enrl_tot\n1         67      195\n2        101      240\n3        169     1550\n4         85      243\n5        171     1335\n6         25      137\n7         28      195\n8         66      888\n9         35      379\n10         0     2247\n11        86      446\n12        56      987\n13        25      103\n14         0      487\n15        31      649\n16        80      852\n17       100      491\n18        50      421\n19       960     6880\n20       139     2688\n21        69      440\n22        53      475\n23       169     2538\n24         0      476\n25       216     2357\n26       198     1588\n27       742     7306\n28       269     2601\n29        67      847\n30        55      452\n31       569     4142\n32       224     2102\n33       721    10012\n34       202     2488\n35      1713    25151\n36       177     2267\n37       204     1657\n38        18      284\n39       562     5370\n40       275     2471\n41      1762    15386\n42        40      184\n43        78     1217\n44       571     6219\n45       324     4258\n46       175     1235\n47      1423    16244\n48        85      814\n49      3324    27176\n50      1306    10696\n51       786     8935\n52       242     1600\n53       669     9028\n54       896    10625\n55       560     7151\n56       202     2404\n57       480     5804\n58       196     2253\n59       152     2807\n60       249     3074\n61        45      723\n62       560     5138\n63      1048    20927\n64       496     3017\n65       149      957\n66       287     1639\n67       284     4340\n68       585     5079\n69       505     6639\n70       129     1154\n71        13      237\n72       273     2987\n73        94      499\n74      1248    11474\n75       107     1088\n76       259     2660\n77         8      353\n78        37      329\n79        32      252\n80        31      175\n81       897     3835\n82         8      314\n83       445     4458\n84       112     1313\n85        36      474\n86       277     1114\n87       178     1358\n88      1015    11629\n89      1261     6195\n90        35      499\n91        27      417\n92        55      300\n93        50      457\n94        34      146\n95        71      460\n96        28      354\n97       315     1841\n98       717     3760\n99        70      500\n100      383     5112\n101       28      146\n102      134     2141\n103      144      610\n104       26      337\n105      597     4501\n106      313     5718\n107     1182    19402\n108      560     3401\n109      397     2621\n110       87      426\n111       24      205\n112     1321    13668\n113       98      342\n114      499     6518\n115       30      239\n116      281     2911\n117     1338     6272\n118     1435    10218\n119      222     1735\n120       96      474\n121      145      544\n122      283     1987\n123       50      418\n124       40      196\n125       92     2208\n126      165     1255\n127       65     1469\n128      680     7114\n129      170     1962\n130      658     7761\n131       47      216\n132       31      224\n133     1004     7887\n134        0      752\n135     1719     9328\n136       35      548\n137       19      104\n138        4      275\n139       52      443\n140     1268    10337\n141       36      806\n142       25      227\n143     1333     8416\n144       30      149\n145       48      220\n146      601     4612\n147       71      590\n148       25      133\n149      116     2440\n150        0      133\n151       65      519\n152       30      222\n153       36      285\n154      471     3129\n155      167     2019\n156      316     5620\n157     1218     9775\n158       38      246\n159      800     7210\n160     2889    21338\n161       27      477\n162       50      727\n163       46      374\n164     2001    18255\n165     1058     8787\n166       60      797\n167       40      140\n168       51      235\n169     1295     8294\n170      354     2409\n171       16      150\n172      606     3981\n173      345     2326\n174      163      501\n175       48      470\n176       59      575\n177      789     3519\n178       61      474\n179       60      223\n180       22       92\n181      500     4971\n182      226     2617\n183       32      242\n184       75      780\n185       50      324\n186       25      140\n187       26      181\n188       65      516\n189       25      108\n190       58      419\n191     1099    12567\n192       65      287\n193      634     6201\n194      134      577\n195       41      170\n196       36      164\n197       75      382\n198      250     1221\n199      213     2214\n200      409     4523\n201       49      793\n202      254     1678\n203       35      536\n204       36      307\n205       56      347\n206       30      168\n207       81      532\n208      374     3272\n209      268     2045\n210        7      156\n211      164     1129\n212      500     3669\n213       19      157\n214      618     4928\n215       13      103\n216       17      175\n217      241     4153\n218       67      280\n219       96      865\n220     1120     8735\n221       72      412\n222      624     6373\n223       73      332\n224      192     2903\n225       60      565\n226       78      586\n227      626     5068\n228      118      859\n229       20      145\n230      155      649\n231      435     1789\n232       50      775\n233      148      777\n234      419     3518\n235     2401    19294\n236     1158     7661\n237       34      158\n238       42      117\n239       37      160\n240       30      511\n241      296     2770\n242       46      551\n243      474     5205\n244      622     6437\n245      122     1712\n246       56      370\n247      328     3182\n248       32      139\n249     1507    11855\n250      129     1068\n251      224     2295\n252      141     1510\n253       60      579\n254      140     1012\n255      107     1212\n256       23      119\n257       78      590\n258       60      546\n259       51      248\n260      150      461\n261      496     6312\n262       62      285\n263      302     2325\n264     1790    11885\n265       46      564\n266     1671    12380\n267      529     3772\n268       70      895\n269      489     5714\n270       16      105\n271      125     1449\n272       95      510\n273       39      160\n274       50      433\n275      411     3186\n276      576     5010\n277      100      717\n278      335     3548\n279       78      868\n280       60      507\n281      105      822\n282      143     1792\n283      190     1202\n284       58      515\n285      263     1354\n286      113     1252\n287      127      823\n288      258     2231\n289       81      271\n290       85      309\n291      308     3005\n292      114      966\n293      814     7710\n294       54      762\n295      206     1708\n296     1113     9850\n297       10      129\n298     1150    10619\n299      494     4521\n300      114      580\n301      326     2569\n302      756     6022\n303       47      670\n304     1962    14708\n305      706     6601\n306       87      675\n307      193     2458\n308       14      144\n309       48      573\n310       82      721\n311      160      992\n312        0     8432\n313       15      244\n314      785     7116\n315       95      830\n316       38      160\n317      220     1588\n318      307     2272\n319       65     1425\n320       30      245\n321      259     1349\n322       65      400\n323      637     4632\n324       15      224\n325       92      576\n326       75      451\n327      145      900\n328       10      118\n329        0     1457\n330      586     4734\n331      379     3303\n332      540     6055\n333       39      424\n334      615     2801\n335       37      187\n336       17      129\n337       41      188\n338      116     1212\n339      249     2596\n340      753     4925\n341      930     6257\n342      122      868\n343      934     3787\n344      855     6423\n345       47      678\n346       23      162\n347      834     8529\n348      231     1862\n349      183     1452\n350       32      155\n351      343     2536\n352      103      567\n353      135      953\n354       42      296\n355       24      198\n356       49      218\n357      117      734\n358       50      189\n359      482     2528\n360      290     2987\n361       21      208\n362       29      379\n363       27      145\n364      103      706\n365      105      878\n366       75      594\n367       40      139\n368      318     2089\n369       42      326\n370       50      516\n371       50      449\n372       70      297\n373      165     1579\n374       49      383\n375       14       81\n376      701     5259\n377      223     1960\n378       31      151\n379      310      946\n380      300     2707\n381      141      919\n382      216      945\n383      220      738\n384       35      164\n385       29      167\n386       25      125\n387      113     1091\n388       27      134\n389       55      600\n390      283     1803\n391       15      158\n392      439     2392\n393       33      526\n394       44      141\n395       30      235\n396      406     3280\n397        0     1254\n398      155      948\n399     2232    15228\n400       21       81\n401      540     2768\n402       84      535\n403      404     2542\n404      265     1940\n405      272     1059\n406      403     2340\n407      496     3469\n408      300     2106\n409      112      478\n410      241     1885\n411      466     2422\n412      412     1318\n413       22      220\n414      209      687\n415      286     2341\n416      195      984\n417      721     3724\n418       45      441\n419       14      101\n420      313     1778\n```\n:::\n:::\n\n\n### Finding Correlation\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Base R\ncor(data$computer, data$enrl_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9288821\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Tidy way\ndata %>% select(computer, enrl_tot) %>% cor() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          computer  enrl_tot\ncomputer 1.0000000 0.9288821\nenrl_tot 0.9288821 1.0000000\n```\n:::\n:::\n\n\n### Filter Observations\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata %>% select(gr_span, computer) %>% \n  filter(gr_span==\"KK-06\")  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   gr_span computer\n1    KK-06        0\n2    KK-06      742\n3    KK-06      324\n4    KK-06      669\n5    KK-06      196\n6    KK-06      560\n7    KK-06     1048\n8    KK-06      505\n9    KK-06      129\n10   KK-06      178\n11   KK-06      499\n12   KK-06     1435\n13   KK-06       65\n14   KK-06     1268\n15   KK-06     2889\n16   KK-06     1295\n17   KK-06      354\n18   KK-06       16\n19   KK-06       59\n20   KK-06      500\n21   KK-06       65\n22   KK-06       67\n23   KK-06      474\n24   KK-06       32\n25   KK-06       23\n26   KK-06      576\n27   KK-06      143\n28   KK-06       58\n29   KK-06      113\n30   KK-06      258\n31   KK-06       81\n32   KK-06      308\n33   KK-06      494\n34   KK-06      326\n35   KK-06       38\n36   KK-06      220\n37   KK-06       30\n38   KK-06      145\n39   KK-06      586\n40   KK-06      540\n41   KK-06       41\n42   KK-06      834\n43   KK-06       32\n44   KK-06      117\n45   KK-06       50\n46   KK-06      701\n47   KK-06       31\n48   KK-06      300\n49   KK-06      216\n50   KK-06       35\n51   KK-06       29\n52   KK-06       27\n53   KK-06       15\n54   KK-06       44\n55   KK-06       30\n56   KK-06        0\n57   KK-06       21\n58   KK-06       84\n59   KK-06      404\n60   KK-06      300\n61   KK-06       22\n```\n:::\n:::\n\n\n### _And_ and _Or_ in R\n\nTo select schools in Orange county with enrollment over 5000\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata1 <- data %>% \n  filter(county==\"Orange\" & enrl_tot>=5000)\n```\n:::\n\nTo select schools that are either in Orange country or in LA county\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata2 <- data %>% \n  filter(county==\"Orange\" | county==\"Los Angeles\")\n```\n:::\n\n### Summarize Variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Calculating mean\ndata %>% summarise(mean(computer))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  mean(computer)\n1       303.3833\n```\n:::\n\n```{.r .cell-code}\n# Standard deviation and median\ndata %>% summarise(sd = sd(computer), \n                   med = median(comp_stu))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        sd       med\n1 441.3413 0.1254644\n```\n:::\n:::\n\n\n### Creating New Variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata <- data %>% \n  mutate(log_enrl = log(enrl_tot))\n```\n:::\n\n- The code takes `data` and adds a new column `log_enrl`, which is the log of `enrl_tot` \n- It then updates the original data with this new column.\n\n\n### Creating New Variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata <- data %>% \n  mutate(hcomp = ifelse(comp_stu>=median(comp_stu),1,0))\n```\n:::\n\n\n-   Syntax: `ifelse(test_expression, x, y)`\n-   The returned vector has element from `x` if the corresponding value of `test_expression` is `TRUE` and `y` if it is `FALSE`\n-   So here `hcomp` takes value 1 whenever computers per student are above the median, and 0 otherwise. What should be the output from `mean(data$hcomp)`?\n\n### Combining `group_by()` and `summarise()`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata %>% \n  group_by(hcomp) %>% \n  summarise(mean(comp_stu))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hcomp `mean(comp_stu)`\n  <dbl>            <dbl>\n1     0           0.0881\n2     1           0.184 \n```\n:::\n:::\n\n\n### Excercise for you\nFind the county with the highest average number of computers per student (`comp_stu`) (Hint: Use `group_by(county)` and `summarise()`)\n\n### What's next?\n\n- Next class we will continue with R\n- Problem set 2 is available on Canvas and is due next Tuesday (09/19)\n- Get in touch with your research group partner(s) and start thinking about your project\n- Research Paper First Submission is due in two weeks (09/26)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}