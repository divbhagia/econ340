{
  "hash": "ad72d4dfbc9af6e77c7b663457cdf6c3",
  "result": {
    "markdown": "---\ntitle: |\n  | ECON 340  \n  | Economics Research Methods\nauthor: |\n  | Div Bhagia\n  |\n  | Lecture 6: Getting Started with R\ndate: |\ndocumentclass: slidesLight\noutput:\n  beamer_presentation\nheader-includes:\n  - \\renewcommand{\\tightlist}{\\setlength{\\itemsep}{10pt}\\setlength{\\parskip}{0pt}}\nurlcolor: blue\n---\n\n\n\n\n### Before we begin\n-   Make sure you have R and RStudio installed on your computer\n-   Let's create a new folder on our computers, you can call it `Econ340_R`\n-   Now let's download the dataset \"caschool.csv\" from our [Dropbox folder](https://www.dropbox.com/sh/9x7ac4qwnddl650/AAAP1FdTpFp2rXyZ6t-9-qqTa?dl=0) and save it in this folder. \n\n### About R and R Studio\n-   R is an *open-source* language designed for statistical computing \n-   Numerous add-on packages are available for R\n-   Once you install R, you will have base packages installed. We will also use other packages and install them as we go. \n-   RStudio IDE is a set of integrated tools designed to use R more easily\n\n### Interface\n![](interface.png){width=\"90%\"}\n\n### Getting Started\n-   Open RStudio and create a new R Script:\\\n    File $\\rightarrow$ New File $\\rightarrow$ R Script\n-   This should create a new untitled file in your window.\n-   Save this file to the `Econ340_R` folder we created:\\\n    File $\\rightarrow$ Save as $\\rightarrow$ Type *getting_started* $\\rightarrow$ Save\n-   We will write all of our code in this script and execute it using the Run button on the top right\n\n\n### Installing Packages\n-   Let us now install our first package `TidyVerse`\n- [TidyVerse](https://www.tidyverse.org/) is a collection of R packages that share an underlying design philosophy, grammar, and data structures\n-   You only need to install a package once, so no need to do it again if you installed `TidyVerse` before\n-   To install a package:\nTools $\\rightarrow$ Install Packages $\\rightarrow$ Install from Repository (CRAN) $\\rightarrow$ Type *TidyVerse*\n    \n### Loading Packages\n-   Once a package is installed you need to load it before you can use it, so at the top of your R script put the following command:\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    ```\n    :::\n\n\n### File Management\n-   It is good practice to keep all files related to a project in one folder \n-   Essentially you want R to use this folder as your *working directory*\n-   Working directory is the folder where R will save files and retrieve files from\n\n\n### How to set the working directory\nThree ways to set the working directory:\n\n-   Option 1: Initialize R from this folder: click on the R script _in_ the folder to open RStudio\n    -   Note: This doesn't work if RStudio is already running so quit it and then restart it again by clicking on the R script in the folder.\n-   Option 2: Open the folder under *Files* on bottom-left in R Studio and click on: More $\\rightarrow$ Set As Working Directory\n-   Option 3: Manually tell R the directory (path) of this folder\n\n### Option 3: Manually setting the path\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Manually set directory\nsetwd(\"/Users/dbhagia/myfolder\")\n```\n:::\n\n\n-   On a Mac, you can right click on any folder and click *Get Info* to get the path\n-   On a Windows computer, you can find the location in the address bar on the top (replace \"\\\\\" with \"/\")\n-   Alternatively, you can find your path by opening the folder under Files on bottom-left in R Studio and clicking: More $\\rightarrow$ Copy Folder Path to Clipboard\n\n### Importing Data\n-   We can import data from all kinds of format in R\n-   Some of the common formats in which data are stored are .xls, .xlsx, .csv\n-   .xls and .xlsx are Microsoft Excel's native formats, however often data is stored in .csv files as the they are simpler\n-   Data in R format has extension .rda or .Rdata \n\n### So Far\n- You should have a folder on your computer with \"caschool.csv\" and \"getting_started.R\".\n- In your R script, you shoud have the following commands\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    setwd(\"your_folder_location\") # Optional\n    ```\n    :::\n\n- Run your code and make sure you do not get an error \n- You can select both lines and Run or use the dropdown next to Run and click Run All or use Source. *(If you just click Run, it will only execute the current line)* \n\n\n### Importing Data\nTo import the dataset:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata <- read.csv(\"caschool.csv\")\n```\n:::\n\nThis data set consists of information on 420 elementary school districts in California from 1998-1999. \n&nbsp;\n\nYou can find the description of the variables in the accompanying codebook.\n\n### Assignment Operator\n-   The symbol $<-$ stands for the assignment operator\n-   You can use shorcut Alt + - (Windows) or Option + - (Mac)\\\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    data <- read.csv(\"caschool.csv\")\n    ```\n    :::\n\n- In the above code, we created a new object `data` and assigned the dataset we loaded using `read.csv()` to this object\n- If your command ran succesfully, a new object called `data` should appear under the `Environment` (top-right) \n\n### Assignment Operator\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\numm <- 2\numm <- \"Hello\"\numm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\"\n```\n:::\n:::\n\n-   The first line of code above creates a new object `umm` and assigns value 2 to it.\n-   The next line of code takes the existing object `umm` and assigns a new value to it.\n-   Third line displays what is stored in object `umm`\n\n### Exploring Data\n-   Before doing anything too complicated, let's get a feel of the data\n-   You can double click on the object `data` (or whatever you named it) under the `Environment` (top-right)\n-   Or single click on the arrow on left of data to see the structure of the data (alternatively use `str()` command)\n-   Some variables are stored as characters (`chr`), some as integers (`int`)\n\n### Exploring Data\nTo see the list of variables:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nls(data)\n```\n:::\n\nTo summarize all variables in a dataset:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(data)\n```\n:::\n\nTo summarize a particular variable:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(data$avginc)\n```\n:::\n\n\n### R Syntax\n-   To call a variable we need to use `data$var_name` as multiple data objects can be loaded in R at the same time\n-   Say we want to find the average math score\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    # Average math score\n    mean(data$math_scr)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 653.3426\n    ```\n    :::\n    :::\n\n-   Can write comments using `#`\n-   Try `median()` and `sd()` as well\n\n### Help in R\n-   To learn more about any function or it's arguments, one can type `?function_name` in the console.\n-   For instance,\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    ?mean\n    ```\n    :::\n\n-   This will open up the documentation for this section in the Help window (bottom-right).\n\n### More on R Syntax\nNearly everything we do in R fits into one of three categories:\n\n-   Create or overwrite an object (using the assignment operator $<-$)\n-   Apply functions to objects\n-   Look at objects\n\nWhen we input arguments in the order the function lists them, no need to explicitly specify what argument we are referring to. \n\n### Exercise for you\n- Create a new object called `mean_comp` that contains the mean of variable `computer`\n- Create a new variable in the data frame `data` called `mean_comp` that contains the mean of `computer`\n\n### Creating Objects\n- You can create a new vector that contains numbers 1-5:\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    x1 <- c(1, 2, 3, 4, 5)\n    ```\n    :::\n\n- To create `x2` that contains 0 and 100 on the left and right of `x1`, respectively \n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    x2 <- c(0, 1, 2, 3, 4, 5, 100)\n    ```\n    :::\n\n- Alternatively\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    x2 <- c(0, x1, 100)\n    ```\n    :::\n\n\n### Another exercise for you\n- Use `?mean()` to figure out what the following code does:\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    mean(x2, 0.25)\n    ```\n    :::\n\n\n### More on R Syntax\n- Note that `mean(x2, 0.25)`  is equivalent to \n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    mean(x = x2, trim = 0.25)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 3\n    ```\n    :::\n    :::\n\n- We can even write:\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    mean(trim = 0.25, x = x2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 3\n    ```\n    :::\n    :::\n\nIf we follow the order, no need to explicitly refer to which argument and we can simply write `mean(x2, 0.25)`. \n\n### Few Last Words\n-   Best way to learn a programming language is by using it\n-   It is definitely challenging with a steep learning curve, but it is rewarding in the end\n-   Internet is your friend (like you didn't know that!)\n-   ChatGPT is helpful, but you still need to understand the programming language to reap its benefits.\n-   Have fun while you are at it!\n-   Next class: really cool things you can do in R :)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}