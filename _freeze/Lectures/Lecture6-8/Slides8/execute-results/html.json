{
  "hash": "d66740655ae58f518b2e26dafe22f7a7",
  "result": {
    "markdown": "---\ntitle: |\n  | ECON 340  \n  | Economics Research Methods\nauthor: \"Div Bhagia\"\ndate: |\n  | Lecture 8: Data Analysis in R\ndocumentclass: slidesLight\noutput:\n  beamer_presentation\nheader-includes:\n  - \\renewcommand{\\tightlist}{\\setlength{\\itemsep}{10pt}\\setlength{\\parskip}{0pt}}\nurlcolor: blue\n---\n\n\n\n\n### Let's get started\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load Packages\nlibrary(tidyverse)\n\n# Import data\ndata <- read.csv(\"caschool.csv\")\n```\n:::\n\n\n### From Last Class\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata <- data %>% \n  mutate(hcomp = ifelse(comp_stu>=median(comp_stu),1,0))\n```\n:::\n\n\n-   Syntax: `ifelse(test_expression, x, y)`\n-   The returned vector has element from `x` if the corresponding value of `test_expression` is `TRUE` and `y` if it is `FALSE`\n-   So here `hcomp` takes value 1 whenever computers per student are above the median, and 0 otherwise. What should be the output from `mean(data$hcomp)`?\n\n### Factor Variables\n-   Variables can be continous (like `testscr`) or discrete (like `hcomp` and `gr_span`)\n-   When the categorical variable is numeric (like `hcomp`) sometimes it is useful to store it as a _factor_ variable\n-   This helps prevent R from treating it as a continous variable\n\n### Factor Variables\nTo factorize `hcomp`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata$hcompf <- factor(data$hcomp, \n                      levels = c(0,1),\n                      labels = c(\"Low\", \"High\"))\n```\n:::\n\n\nOr simply,\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata$hcompf2 <- factor(data$hcomp)\n```\n:::\n\n\n### Graphs using `ggplot`\n\n-   `ggplot2` is an R package included with TidyVerse for data visualization (alternative to base R's plot())\n-   ggplot2 is designed to work iteratively\n-   You start with a layer and then add layers (using +s) of annotations and statistical summaries\n\n### Histogram: Discrete Variable\n\\vspace{-0.75em}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=data, aes(x=gr_span)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Slides8_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n### Histogram: Continous Variable\n\\vspace{-0.75em}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=data, aes(x=str)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](Slides8_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n### Making things pretty\n\\vspace{-0.75em}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data=data, aes(x=str)) +\n  geom_histogram(color=\"black\",fill=\"blue\",alpha=0.25) +\n  labs(x=\"Student-Teacher Ratio\", y=\"Count\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Slides8_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n### Scatterplot\n\\vspace{-0.75em}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data, aes(x=str, y=testscr)) +\n  geom_point(shape=1) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Slides8_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n\n### Saving output\n\n- To save graphs produced by `ggplot()`, use `ggsave()`\n- Saves the last graph that was produced in your working directory unless specified otherwise\n- Let's try it \n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    ggsave(\"myplot.png\")\n    ```\n    :::\n\n- Can even specify the height and width of our graphs\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    ggsave(\"myplot.png\", width = 4, height = 3)\n    ```\n    :::\n\n\n### Another Useful Package: Stargazer\n\\vspace{-0.75em}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(stargazer)\ndata %>%\n  select(testscr, str, comp_stu, meal_pct) %>%\n  stargazer(type = 'text')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n==============================================\nStatistic  N   Mean   St. Dev.   Min     Max  \n----------------------------------------------\ntestscr   420 654.157  19.053  605.550 706.750\nstr       420 19.640   1.892   14.000  25.800 \ncomp_stu  420  0.136   0.065    0.000   0.421 \nmeal_pct  420 44.705   27.123   0.000  100.000\n----------------------------------------------\n```\n:::\n:::\n\n\n\n### Real Data is Messier\n-   Missing values are stored as `NA` in R\n-   If a value is missing, `mean()` and other functions will give an error, so use option `na.rm=TRUE`\n-   logical `is.na()` returns `TRUE` if value is missing and `FALSE` otherwise\n-   So you can use `filter()` as follows to delete missing values on some variable `var`\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    data  <- data  %>% \n      filter(is.na(var) = FALSE)\n    ```\n    :::\n\n\n\n### Real Data is Messier\n- Often we need to combine two different datasets \n- To merge two data sets on the basis of a common unit, use `merge()`\n- To append data sets, say, across years, can use `rbind()`\n- Problem set 2 will have you deal with some of this\n- Next week: Back to theory\n",
    "supporting": [
      "Slides8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}